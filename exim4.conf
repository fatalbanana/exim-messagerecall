disable_ipv6
keep_environment = :
local_interfaces = 127.0.0.1.25
tls_advertise_hosts = :

acl_smtp_rcpt = acl_check_rcpt

SKEY_A=lKndXJaUBgJtSJis2yx0
SKEY_B=P7MnFf7F9KLxZbc9Ftzy

domainlist recall_domains = r.example.org

begin acl

acl_check_rcpt:

  # Try check localpart is valid base64 to avoid tempfail
  deny
    domains = +recall_domains
    condition = ${if match {$local_part} {^(?:[a-zA-Z0-9+\/]\{4\})*(?:|(?:[a-zA-Z0-9+\/]\{3\}=)|(?:[a-zA-Z0-9+\/]\{2\}==)|(?:[a-zA-Z0-9+\/]\{1\}===))\$}{0}{1}}
    message = Invalid localpart

  # Decode base64, extract data. Test first HMAC key.
  warn
    domains = +recall_domains
    set acl_m_recall_allow = 0
    control = caseful_local_part
    set acl_m_recall = ${base64d:$local_part}
    control = caselower_local_part
    set acl_m_recall_msgid = ${extract{m}{$acl_m_recall}}
    set acl_m_recall_hmac = ${extract{h}{$acl_m_recall}}
    set acl_m_recall_test1 = ${hmac{sha1}{SKEY_A}{$acl_m_recall_msgid}}
    condition = ${if eq{$acl_m_recall_hmac}{$acl_m_recall_test1}}
    set acl_m_recall_allow = 1

  # If first HMAC key didn't work, try the second one
  warn
    domains = +recall_domains
    condition = ${if eq{$acl_m_recall_allow}{0}}
    set acl_m_recall_test2 = ${hmac{sha1}{SKEY_B}{$acl_m_recall_msgid}}
    condition = ${if eq{$acl_m_recall_hmac}{$acl_m_recall_test2}}
    set acl_m_recall_allow = 1

  # Reject message if neither key worked
  # TODO: rather fail at delivery time to generate bounce?
  deny
    domains = +recall_domains
    condition = ${if eq{$acl_m_recall_allow}{0}}
    message = Your request was invalid

  # TODO: check message-id looks like exim queue-id

  # Remove message from queue
  accept
    domains = +recall_domains
    condition = ${run{/usr/sbin/exim4 -Mg $acl_m_recall_msgid}{1}{1}}     

  warn
    domains = +recall_domains

  require
    authenticated = *
    message = relay not permitted

  accept


begin routers

msgrecall:
  driver = redirect
  domains = +recall_domains
  data = :blackhole:

dnslookup:
  driver = dnslookup
  transport = remote_smtp
  ignore_target_hosts = 0.0.0.0 : 127.0.0.0/8 : 192.168.0.0/16 :\
                        172.16.0.0/12 : 10.0.0.0/8 : 169.254.0.0/16 :\
                        255.255.255.255


begin transports

remote_smtp:
  driver = smtp


begin retry

*                      *           F,2h,15m; G,16h,1h,1.5; F,4d,6h


begin authenticators

test1_plain:
  driver = plaintext
  public_name = PLAIN
  server_condition = ${if eq{$auth3}{hunter2}}
  server_set_id = $auth2
